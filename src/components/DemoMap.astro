<style>
  gmp-map-3d {
    height: 100dvh;
    width: 100%;
  }
</style>

<gmp-map-3d
  mode="hybrid"
  center="40.7079,-74.0132,100"
  heading="30"
  tilt="55"
  range="5000"
>
  <gmp-polygon-3d
    altitude-mode="relative-to-ground"
    fill-color="rgba(255, 0, 0, 0.5)"
    stroke-color="#0000ff"
    stroke-width="8"
    extruded
  >
  </gmp-polygon-3d>
</gmp-map-3d>

<script is:inline>
  const map3DElement = document.querySelector("gmp-map-3d");
  const polygon3d = document.querySelector("gmp-polygon-3d");
  let model;

  async function init() {
    // Import the needed libraries.
    await google.maps.importLibrary("maps3d");

    polygon3d.outerCoordinates = [
      { lat: 40.7144, lng: -74.0208, altitude: 1000 },
      { lat: 40.6993, lng: -74.019, altitude: 1000 },
      { lat: 40.7035, lng: -74.0004, altitude: 1000 },
      { lat: 40.7144, lng: -74.0208, altitude: 1000 },
    ];

    place3dObject();
  }

  const zoomToViewport = async (geometry) => {
    const { AltitudeMode, Polyline3DElement, Polygon3dElement } =
      await google.maps.importLibrary("maps3d");
    let viewport = geometry.viewport;
    let locationPoints = [
      {
        lat: viewport.getNorthEast().lat(),
        lng: viewport.getNorthEast().lng(),
        altitude: 100,
      },
      {
        lat: viewport.getSouthWest().lat(),
        lng: viewport.getNorthEast().lng(),
        altitude: 100,
      },
      {
        lat: viewport.getSouthWest().lat(),
        lng: viewport.getSouthWest().lng(),
        altitude: 100,
      },
      {
        lat: viewport.getNorthEast().lat(),
        lng: viewport.getSouthWest().lng(),
        altitude: 100,
      },
      {
        lat: viewport.getNorthEast().lat(),
        lng: viewport.getNorthEast().lng(),
        altitude: 100,
      },
    ];

    polygon3d.outerCoordinates = locationPoints;

    if (map3DElement) {
      map3DElement.flyCameraTo({
        endCamera: {
          center: {
            lat: viewport.getCenter().lat(),
            lng: viewport.getCenter().lng(),
            altitude: 100,
          },
          heading: 0,
          tilt: 67.5,
          range: 1000,
        },
        durationMillis: 5000,
      });
    }
  };

  function updatePolygon(polygon) {
    polygon3d.outerCoordinates = polygon.coordinates.map((each) => ({
      lat: each.lat(),
      lng: each.lng(),
      altitude: 0,
    }));

    map3DElement.flyCameraTo({
      endCamera: {
        center: {
          lat: polygon.center.lat,
          lng: polygon.center.lng,
          altitude: 100,
        },
        heading: 0,
        tilt: 43.5,
        range: 400,
      },
      durationMillis: 1000,
    });
  }

  function listenForPlaceChange() {
    document.addEventListener("placeChanged", (event) => {
      const place = event.detail;
      zoomToViewport(place.geometry);
    });

    document.addEventListener("polygonUpdated", (event) => {
      const polygon = event.detail;

      setTimeout(() => {
        updatePolygon(polygon);
        place3dObject(polygon.center);
      }, 1000);
    });
  }

  async function place3dObject(center) {
    const { Model3DElement } = await google.maps.importLibrary("maps3d");

    if (!model) {
      model = new Model3DElement({
        src: "./warehouse.glb",
        position: center,
        altitudeMode: "RELATIVE_TO_GROUND",
        orientation: { tilt: 270, roll: 90 },
        scale: 1,
      });
     map3DElement.append(model);
    }else {
      model.position = center;
    }
  }

  init();
  listenForPlaceChange();
</script>
