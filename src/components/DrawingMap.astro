<div id="map"></div>
<div class="controls">
  <button id="doneButton">Done</button>
  <p id="result"></p>
</div>

<script is:inline>
  let map;
  let polygon;
  let widthMarker, heightMarker, rotationMarker;
  let center = { lat: 37.7749, lng: -122.4194 }; // Default center (San Francisco)
  let width = 100; // Initial width in meters (horizontal extent)
  let height = 100; // Initial height in meters (vertical extent)
  let rotation = 0; // Initial rotation in degrees (0Â° points north)
  const rotationDistance = 40; // Distance for rotation marker in meters

  function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
      center: center,
      zoom: 17,
      mapTypeId: google.maps.MapTypeId.SATELLITE,
    });

    // Initialize the polygon as draggable
    updateRectangle();

    // Update center when polygon is dragged
    polygon.addListener("dragend", () => {
      const path = polygon.getPath().getArray();
      const newCenterLat = path.reduce((sum, point) => sum + point.lat(), 0) / 4;
      const newCenterLng = path.reduce((sum, point) => sum + point.lng(), 0) / 4;
      center = { lat: newCenterLat, lng: newCenterLng };
      updateOtherMarkers("none");
    });

    // Width Marker (right side, controls horizontal extent)
    widthMarker = new google.maps.Marker({
      position: google.maps.geometry.spherical.computeOffset(center, width / 2, rotation + 90),
      map: map,
      draggable: true,
      title: "Width (Drag to Resize)",
      label: { text: "width", color: "#FFFFFF", fontWeight: "bold" },
    });

    // Height Marker (bottom side, controls vertical extent)
    heightMarker = new google.maps.Marker({
      position: google.maps.geometry.spherical.computeOffset(center, -height / 2, rotation),
      map: map,
      draggable: true,
      title: "Height (Drag to Resize)",
      label: { text: "height", color: "#FFFFFF", fontWeight: "bold" },
    });

    // Rotation Marker
    rotationMarker = new google.maps.Marker({
      position: google.maps.geometry.spherical.computeOffset(center, width / 2 + rotationDistance, rotation + 90),
      map: map,
      draggable: true,
      title: "Rotation (Drag to Rotate)",
      label: { text: "rotate", color: "#FFFFFF", fontWeight: "bold" },
    });

    // Width Marker Drag (adjust horizontal extent, fix left edge)
    widthMarker.addListener("drag", () => {
      const p = widthMarker.getPosition();
      const leftEdge = google.maps.geometry.spherical.computeOffset(center, -width / 2, rotation + 90);
      const distance = google.maps.geometry.spherical.computeDistanceBetween(leftEdge, p);
      const heading = google.maps.geometry.spherical.computeHeading(leftEdge, p);
      const angleDiff = ((heading - (rotation + 90)) * Math.PI) / 180;
      const projectedDistance = distance * Math.cos(angleDiff);

      if (projectedDistance > 10) { // Prevent collapse
        width = projectedDistance;
        center = google.maps.geometry.spherical.computeOffset(leftEdge, width / 2, rotation + 90);
      }

      updateRectangle();
      updateOtherMarkers("width");
    });

    // Height Marker Drag (adjust vertical extent, fix top edge)
    heightMarker.addListener("drag", () => {
      const p = heightMarker.getPosition();
      const topEdge = google.maps.geometry.spherical.computeOffset(center, height / 2, rotation);
      const distance = google.maps.geometry.spherical.computeDistanceBetween(topEdge, p);
      const heading = google.maps.geometry.spherical.computeHeading(topEdge, p);
      const angleDiff = ((heading - (rotation + 180)) * Math.PI) / 180;
      const projectedDistance = distance * Math.cos(angleDiff);

      if (projectedDistance > 10) { // Prevent collapse
        height = projectedDistance;
        center = google.maps.geometry.spherical.computeOffset(topEdge, -height / 2, rotation);
      }

      updateRectangle();
      updateOtherMarkers("height");
    });

    // Rotation Marker Drag
    rotationMarker.addListener("drag", () => {
      const p = rotationMarker.getPosition();
      rotation = google.maps.geometry.spherical.computeHeading(center, p);
      updateRectangle();
      updateOtherMarkers("rotation");
    });

    // Done Button Handler
    document.getElementById("doneButton").addEventListener("click", () => {
      const path = polygon.getPath().getArray();
      const areaM2 = google.maps.geometry.spherical.computeArea(path);
      const areaFt2 = areaM2 * 10.7639;
      const coords = path.map(point => `(${point.lat().toFixed(6)}, ${point.lng().toFixed(6)})`).join("\n");
      document.getElementById("result").innerText = `Coordinates:\n${coords}\n\nArea: ${areaFt2.toFixed(2)} square feet`;
    });
  }

  function updateRectangle() {
    const corners = [
      // Top-right corner
      google.maps.geometry.spherical.computeOffset(
        google.maps.geometry.spherical.computeOffset(center, height / 2, rotation),
        width / 2,
        rotation + 90
      ),
      // Bottom-right corner
      google.maps.geometry.spherical.computeOffset(
        google.maps.geometry.spherical.computeOffset(center, -height / 2, rotation),
        width / 2,
        rotation + 90
      ),
      // Bottom-left corner
      google.maps.geometry.spherical.computeOffset(
        google.maps.geometry.spherical.computeOffset(center, -height / 2, rotation),
        -width / 2,
        rotation + 90
      ),
      // Top-left corner
      google.maps.geometry.spherical.computeOffset(
        google.maps.geometry.spherical.computeOffset(center, height / 2, rotation),
        -width / 2,
        rotation + 90
      ),
    ];

    if (!polygon) {
      polygon = new google.maps.Polygon({
        paths: corners,
        map: map,
        strokeColor: "#FF0000",
        fillColor: "#FF0000",
        fillOpacity: 0.15,
        strokeWeight: 2,
        draggable: true,
      });
    } else {
      polygon.setPath(corners);
    }
  }

  function updateOtherMarkers(exclude) {
    if (exclude !== "width") {
      widthMarker.setPosition(google.maps.geometry.spherical.computeOffset(center, width / 2, rotation + 90));
    }
    if (exclude !== "height") {
      heightMarker.setPosition(google.maps.geometry.spherical.computeOffset(center, -height / 2, rotation));
    }
    if (exclude !== "rotation") {
      rotationMarker.setPosition(google.maps.geometry.spherical.computeOffset(center, width / 2 + rotationDistance, rotation + 90));
    }
  }
</script>

<script
  src=`https://maps.googleapis.com/maps/api/js?key=${import.meta.env.MAPS_KEY}&libraries=geometry&callback=initMap`
  async
  defer></script>

<style>
  #map {
    height: 800px; /* Set a specific height */
    width: 100%;
  }
  .controls {
    margin-top: 10px;
  }
  button {
    margin: 5px;
    padding: 8px 12px;
    font-size: 14px;
  }
</style>
